
ATM para çekme sistemi için detaylı pseudocode yaz. PIN
kontrolü (3 deneme), bakiye kontrolü, tutar kontrolü içermeli

Hali hazırda bir Graphviz DOT aracı mevcut değil, bu nedenle pseudocode'u Graphviz DOT diline metin olarak çevireceğim.

Bu Graphviz kodu, verdiğiniz pseudocode'un mantıksal akışını (akış şeması - flowchart) temsil edecektir.

Kod snippet'i
digraph ATM_PARA_CEKME_SISTEMI {
    // Graf ayarları
    rankdir=TB; // Yukarıdan aşağıya akış (Top-to-Bottom)
    node [shape=box]; // Varsayılan düğüm şekli kutu
    
    // Şekil tanımları
    start_node [shape=oval, label="BAŞLA"];
    end_node [shape=oval, label="BİTİR"];
    input_kart [shape=box, label="EKRANA_YAZ('Lütfen kartınızı takınız.')\nBEKLE_KART_GİRİŞİ()"];
    decision_kart_takildi [shape=diamond, label="KART_TAKILDI mı?"];
    process_kart_oku [shape=box, label="KartID AL\nHESAP_BİLGİLERİ AL\nPIN_DENEME_SAYISI = 0"];
    
    // PIN Kontrolü Döngüsü
    loop_pin_start [shape=box, label="DÖNGÜ_SAYACI = 1'den 3'e KADAR"];
    input_pin [shape=box, label="EKRANA_YAZ('PIN giriniz')\nKULLANICI_PIN AL"];
    decision_pin_dogru [shape=diamond, label="KULLANICI_PIN == DOĞRULANMIŞ_PIN?"];
    process_pin_dogru [shape=box, label="PIN_DOĞRULANDI = DOĞRU\nDÖNGÜDEN_ÇIK"];
    process_pin_yanlis [shape=box, label="EKRANA_YAZ('Hatalı PIN')\nPIN_DENEME_SAYISI++"];
    
    // PIN Bloke Kontrolü
    decision_pin_dogrulandi [shape=diamond, label="PIN_DOĞRULANDI == YANLIŞ?"];
    process_bloke [shape=box, label="EKRANA_YAZ('Kartınız bloke edildi')\nKART_BLOKE_ET()\nKART_İADE_ET()"];
    
    // Para Çekme İşlemi
    process_pin_basarili [shape=box, label="EKRANA_YAZ('PIN doğrulandı')"];
    
    // Tutar Kontrolü Döngüsü
    loop_tutar_start [shape=box, label="DÖNGÜ TUTAR_GEÇERLİ == YANLIŞ İKEN"];
    input_tutar [shape=box, label="EKRANA_YAZ('Çekme tutarını giriniz')\nÇEKME_TUTARI AL"];
    
    // Tutar Kontrolü Zinciri
    decision_min_tutar [shape=diamond, label="TUTAR < MİNİMUM_CEKİM?"];
    decision_max_tutar [shape=diamond, label="TUTAR > MAKSİMUM_CEKİM?"];
    decision_banknot [shape=diamond, label="BANKNOT_KONTROLÜ(TUTAR) == YANLIŞ?"];
    decision_bakiye [shape=diamond, label="TUTAR > BAKİYE?"];
    
    process_hata_min [shape=box, label="EKRANA_YAZ('Hata: Min tutar')"];
    process_hata_max [shape=box, label="EKRANA_YAZ('Hata: Maks tutar')"];
    process_hata_banknot [shape=box, label="EKRANA_YAZ('Hata: Banknot')"];
    process_hata_bakiye [shape=box, label="EKRANA_YAZ('Hata: Yetersiz bakiye')"];
    
    process_tutar_gecerli [shape=box, label="TUTAR_GEÇERLİ = DOĞRU"];

    // İşlem Onay ve Gerçekleştirme
    process_onay [shape=box, label="EKRANA_YAZ('İşlem onaylanıyor...')\nYENİ_BAKİYE = BAKİYE - ÇEKME_TUTARI\nHESAP_BAKİYE_GUNCELLE()"];
    process_para_ver [shape=box, label="PARA_DAĞITICI_ÇALIŞTIR()\nEKRANA_YAZ('İşlem başarılı. Paranızı alınız')\nEKRANA_YAZ('Güncel bakiye...')"];
    
    // Kapanış
    process_kart_iade [shape=box, label="EKRANA_YAZ('Lütfen kartınızı alınız.')\nKART_İADE_ET()"];
    process_cik [shape=box, label="EKRANA_YAZ('İyi günler dileriz.')"];
    process_kart_yok [shape=box, label="EKRANA_YAZ('Kart algılanmadı')"];

    // Bağlantılar (Akış Şeması)

    // Başlangıç ve Kart Girişi
    start_node -> input_kart;
    input_kart -> decision_kart_takildi;
    
    // Kart Kontrolü
    decision_kart_takildi -> process_kart_oku [label="Evet"];
    decision_kart_takildi -> process_kart_yok [label="Hayır"];
    process_kart_yok -> process_cik;

    // PIN Kontrolü Döngüsü
    process_kart_oku -> loop_pin_start;
    loop_pin_start -> input_pin;
    input_pin -> decision_pin_dogru;
    
    // PIN Karar Ağacı
    decision_pin_dogru -> process_pin_dogru [label="Evet"];
    decision_pin_dogru -> process_pin_yanlis [label="Hayır"];
    
    // PIN Yanlışsa Döngüye Dönüş veya Bloke
    process_pin_yanlis -> decision_pin_dogrulandi [label="Döngü Sonu Kontrolü"]; 
    process_pin_yanlis -> input_pin [label="3 deneme dolmadı"];

    // Bloke veya Başarı
    decision_pin_dogrulandi -> process_bloke [label="Evet"]; // PIN_DOGRULANDI hala Yanlışsa (3 deneme bitti)
    decision_pin_dogrulandi -> process_pin_basarili [label="Hayır"]; // PIN_DOGRULANDI = Doğru oldu
    
    process_bloke -> end_node;
    process_pin_dogru -> process_pin_basarili; // Başarılı PIN'den sonra Bloke Kontrolüne gerek yok (pseudocode'da DÖNGÜDEN_ÇIK var)
    
    // Tutar Girişi ve Kontrolü Döngüsü
    process_pin_basarili -> loop_tutar_start;
    loop_tutar_start -> input_tutar;
    input_tutar -> decision_min_tutar;

    // Tutar Kontrol Zinciri
    decision_min_tutar -> process_hata_min [label="Evet"];
    decision_min_tutar -> decision_max_tutar [label="Hayır"];

    decision_max_tutar -> process_hata_max [label="Evet"];
    decision_max_tutar -> decision_banknot [label="Hayır"];
    
    decision_banknot -> process_hata_banknot [label="Evet"];
    decision_banknot -> decision_bakiye [label="Hayır"];

    decision_bakiye -> process_hata_bakiye [label="Evet"];
    decision_bakiye -> process_tutar_gecerli [label="Hayır"]; // Tüm kontroller başarılı

    // Hata durumunda döngü başına dönme
    process_hata_min -> loop_tutar_start;
    process_hata_max -> loop_tutar_start;
    process_hata_banknot -> loop_tutar_start;
    process_hata_bakiye -> loop_tutar_start;
    
    // Başarılı Tutar Kontrolü Sonrası İşlem
    process_tutar_gecerli -> process_onay;

    // İşlemi Tamamlama
    process_onay -> process_para_ver;
    process_para_ver -> process_kart_iade;
    process_kart_iade -> process_cik;
    process_cik -> end_node;
}

Bu pseudocode’u Graphviz DOT diline cevir
digraph ATM_PARA_CEKME_SISTEMI {
    // Graf ayarları
    rankdir=TB; // Yukarıdan aşağıya akış
    node [shape=box, style="filled", fillcolor="lightblue"];
    
    // Şekil tanımları
    start_node [shape=oval, label="BAŞLA", fillcolor="palegreen"];
    end_node [shape=oval, label="BİTİR", fillcolor="red"];
    
    // 1. Kart Girişi
    input_kart [shape=box, label="EKRANA_YAZ('Kartınızı takınız')\nBEKLE_KART_GİRİŞİ()"];
    decision_kart_takildi [shape=diamond, label="KART_TAKILDI mı?", fillcolor="yellow"];
    process_kart_oku [shape=box, label="KartID, PIN, Bakiye AL\nPIN_DENEME_SAYISI = 0"];
    process_kart_yok [shape=box, label="EKRANA_YAZ('Kart algılanmadı')"];

    // 2. PIN Kontrolü (Döngü)
    loop_pin_kontrol [shape=diamond, label="PIN_DENEME_SAYISI < 3 ve PIN_DOGRULANDI == YANLIŞ?", fillcolor="yellow"];
    input_pin [shape=box, label="KULLANICI_PIN AL"];
    decision_pin_dogru [shape=diamond, label="KULLANICI_PIN == DOGRULANMIS_PIN?", fillcolor="yellow"];
    process_pin_dogru [shape=box, label="PIN_DOGRULANDI = DOĞRU"];
    process_pin_yanlis [shape=box, label="EKRANA_YAZ('Hatalı PIN')\nPIN_DENEME_SAYISI++"];
    
    // Bloke Etme
    process_bloke [shape=box, label="EKRANA_YAZ('Kart bloke edildi')\nKART_BLOKE_ET()\nKART_İADE_ET()", fillcolor="salmon"];
    
    // 3. Para Çekme İşlemi Hazırlığı
    process_pin_basarili [shape=box, label="EKRANA_YAZ('PIN doğrulandı')"];
    
    // Tutar Kontrolü Döngüsü
    loop_tutar_gecerli [shape=diamond, label="TUTAR_GEÇERLİ == YANLIŞ İKEN", fillcolor="yellow"];
    input_tutar [shape=box, label="ÇEKME_TUTARI AL"];
    
    // Tutar Kontrol Zinciri (Kararlar)
    decision_min_tutar [shape=diamond, label="TUTAR < MİN_CEKİM?", fillcolor="yellow"];
    decision_max_tutar [shape=diamond, label="TUTAR > MAKS_CEKİM?", fillcolor="yellow"];
    decision_banknot [shape=diamond, label="BANKNOT_KONTROLU(TUTAR) == YANLIS?", fillcolor="yellow"];
    decision_bakiye [shape=diamond, label="TUTAR > BAKİYE?", fillcolor="yellow"];
    
    // Hata Mesajları
    process_hata_tekrar [shape=box, label="EKRANA_YAZ('Hata:...')"];
    process_tutar_gecerli [shape=box, label="TUTAR_GEÇERLİ = DOĞRU"];

    // 4. İşlemin Gerçekleştirilmesi
    process_guncelle [shape=box, label="YENİ_BAKİYE = BAKİYE - TUTAR\nHESAP_BAKİYE_GUNCELLE()"];
    process_para_ver [shape=record, label="{İşlem Başarılı|{PARA_DAĞITICI_ÇALIŞTIR(Tutar)|EKRANA_YAZ('Güncel bakiye...')}}", fillcolor="lightgreen"];
    
    // 5. Kapanış
    process_kart_iade [shape=box, label="KART_İADE_ET()\nEKRANA_YAZ('İyi günler dileriz.')"];

    // Bağlantılar (Akış)

    start_node -> input_kart;
    input_kart -> decision_kart_takildi;
    
    // Kart Kontrolü Akışı
    decision_kart_takildi -> process_kart_oku [label="Evet"];
    decision_kart_takildi -> process_kart_yok [label="Hayır"];
    process_kart_yok -> end_node;
    
    // PIN Kontrolü Akışı (Döngü)
    process_kart_oku -> loop_pin_kontrol;
    
    loop_pin_kontrol -> input_pin [label="Evet"];
    loop_pin_kontrol -> process_bloke [label="Hayır"]; // Bloke Durumu (3 deneme doldu VEYA PIN_DOGRULANDI = DOĞRU)
    
    input_pin -> decision_pin_dogru;
    
    decision_pin_dogru -> process_pin_dogru [label="Evet"];
    decision_pin_dogru -> process_pin_yanlis [label="Hayır"];
    
    process_pin_dogru -> process_pin_basarili; // Başarılı PIN -> Sonraki Adım
    process_pin_yanlis -> loop_pin_kontrol; // Yanlış PIN -> Döngü Başına
    
    // Bloke Akışı
    process_bloke -> end_node;
    
    // İşlem Akışı
    process_pin_basarili -> loop_tutar_gecerli;
    
    // Tutar Kontrolü Döngüsü Başlangıcı
    loop_tutar_gecerli -> input_tutar [label="Evet (Tutar Geçersiz)"];
    loop_tutar_gecerli -> process_guncelle [label="Hayır (Tutar Geçerli)"]; 
    
    input_tutar -> decision_min_tutar;

    // Tutar Kontrolleri ve Hatalar
    decision_min_tutar -> process_hata_tekrar [label="Evet (Min Hata)"];
    decision_min_tutar -> decision_max_tutar [label="Hayır"];

    decision_max_tutar -> process_hata_tekrar [label="Evet (Maks Hata)"];
    decision_max_tutar -> decision_banknot [label="Hayır"];
    
    decision_banknot -> process_hata_tekrar [label="Evet (Banknot Hata)"];
    decision_banknot -> decision_bakiye [label="Hayır"];

    decision_bakiye -> process_hata_tekrar [label="Evet (Bakiye Hata)"];
    decision_bakiye -> process_tutar_gecerli [label="Hayır"];
    
    // Hata durumlarında döngü başına dönme
    process_hata_tekrar -> loop_tutar_gecerli;
    
    // Tutar Geçerli ve İşlem Başlatma
    process_tutar_gecerli -> loop_tutar_gecerli; // Döngüyü kırmak için koşul tekrar kontrol edilecek

    // İşlemi Tamamlama
    process_guncelle -> process_para_ver;
    process_para_ver -> process_kart_iade;
    process_kart_iade -> end_node;
}
